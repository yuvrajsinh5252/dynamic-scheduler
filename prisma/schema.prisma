datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role?
  accounts      Account[]
  sessions      Session[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Availability Availability[]
  eventId      String?        @db.ObjectId
  EventUser    EventUser[]
}

model Event {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  start     DateTime
  end       DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  EventUser EventUser[]
}

model EventUser {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  eventId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])
}

model Availability {
  id     String            @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  user   User              @relation(fields: [userId], references: [id])
  userId String            @db.ObjectId
  days   DayAvailability[]
}

type DayAvailability {
  day     String // "Sunday", "Monday", etc.
  enabled Boolean
  from    String // Time in "HH:MM" format
  to      String // Time in "HH:MM" format
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
